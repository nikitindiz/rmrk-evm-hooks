/** WARNING! This file is auto-generated. Please do not edit! */
import { useDEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLEOptions } from './modules/use-d-e-f-a-u-l-t_-a-d-m-i-n_-r-o-l-e';
export * from './modules/use-d-e-f-a-u-l-t_-a-d-m-i-n_-r-o-l-e';
import { useMAX_BPS, MAX_BPSOptions } from './modules/use-m-a-x_-b-p-s';
export * from './modules/use-m-a-x_-b-p-s';
import { useAcceptOffer, AcceptOfferArguments, AcceptOfferOptions } from './modules/use-accept-offer';
export * from './modules/use-accept-offer';
import { useBidBufferBps, BidBufferBpsOptions } from './modules/use-bid-buffer-bps';
export * from './modules/use-bid-buffer-bps';
import { useBuy, BuyArguments, BuyOptions } from './modules/use-buy';
export * from './modules/use-buy';
import { useCancelAuction, CancelAuctionArguments, CancelAuctionOptions } from './modules/use-cancel-auction';
export * from './modules/use-cancel-auction';
import { useCancelDirectListing, CancelDirectListingArguments, CancelDirectListingOptions } from './modules/use-cancel-direct-listing';
export * from './modules/use-cancel-direct-listing';
import { useCreateListing, CreateListingArguments, CreateListingOptions } from './modules/use-create-listing';
export * from './modules/use-create-listing';
import { useGetListingForNft, GetListingForNftArguments, GetListingForNftOptions } from './modules/use-get-listing-for-nft';
export * from './modules/use-get-listing-for-nft';
import { useGetPlatformFeeInfo, GetPlatformFeeInfoOptions } from './modules/use-get-platform-fee-info';
export * from './modules/use-get-platform-fee-info';
import { useGetRoleAdmin, GetRoleAdminArguments, GetRoleAdminOptions } from './modules/use-get-role-admin';
export * from './modules/use-get-role-admin';
import { useGetRoleMember, GetRoleMemberArguments, GetRoleMemberOptions } from './modules/use-get-role-member';
export * from './modules/use-get-role-member';
import { useGetRoleMemberCount, GetRoleMemberCountArguments, GetRoleMemberCountOptions } from './modules/use-get-role-member-count';
export * from './modules/use-get-role-member-count';
import { useGrantRole, GrantRoleArguments, GrantRoleOptions } from './modules/use-grant-role';
export * from './modules/use-grant-role';
import { useHasRole, HasRoleArguments, HasRoleOptions } from './modules/use-has-role';
export * from './modules/use-has-role';
import { useIsTrustedForwarder, IsTrustedForwarderArguments, IsTrustedForwarderOptions } from './modules/use-is-trusted-forwarder';
export * from './modules/use-is-trusted-forwarder';
import { useListings, ListingsArguments, ListingsOptions } from './modules/use-listings';
export * from './modules/use-listings';
import { useOffer, OfferArguments, OfferOptions } from './modules/use-offer';
export * from './modules/use-offer';
import { useOffers, OffersArguments, OffersOptions } from './modules/use-offers';
export * from './modules/use-offers';
import { OnERC1155BatchReceivedArguments, OnERC1155BatchReceivedOptions, UseRMRKMarketplaceOnERC1155BatchReceivedReturnValue } from './modules/use-on-erc1155-batch-received';
export * from './modules/use-on-erc1155-batch-received';
import { OnERC1155ReceivedArguments, OnERC1155ReceivedOptions, UseRMRKMarketplaceOnERC1155ReceivedReturnValue } from './modules/use-on-erc1155-received';
export * from './modules/use-on-erc1155-received';
import { useOnERC721Received, OnERC721ReceivedArguments, OnERC721ReceivedOptions } from './modules/use-on-erc721-received';
export * from './modules/use-on-erc721-received';
import { useRenounceRole, RenounceRoleArguments, RenounceRoleOptions } from './modules/use-renounce-role';
export * from './modules/use-renounce-role';
import { useRevokeRole, RevokeRoleArguments, RevokeRoleOptions } from './modules/use-revoke-role';
export * from './modules/use-revoke-role';
import { useSetAuctionBuffers, SetAuctionBuffersArguments, SetAuctionBuffersOptions } from './modules/use-set-auction-buffers';
export * from './modules/use-set-auction-buffers';
import { useSetPlatformFeeInfo, SetPlatformFeeInfoArguments, SetPlatformFeeInfoOptions } from './modules/use-set-platform-fee-info';
export * from './modules/use-set-platform-fee-info';
import { useSettleAuction, SettleAuctionArguments, SettleAuctionOptions } from './modules/use-settle-auction';
export * from './modules/use-settle-auction';
import { useSupportsInterface, SupportsInterfaceArguments, SupportsInterfaceOptions } from './modules/use-supports-interface';
export * from './modules/use-supports-interface';
import { useTimeBuffer, TimeBufferOptions } from './modules/use-time-buffer';
export * from './modules/use-time-buffer';
import { useTotalListings, TotalListingsOptions } from './modules/use-total-listings';
export * from './modules/use-total-listings';
import { useUpdateListing, UpdateListingArguments, UpdateListingOptions } from './modules/use-update-listing';
export * from './modules/use-update-listing';
import { useWinningBid, WinningBidArguments, WinningBidOptions } from './modules/use-winning-bid';
export * from './modules/use-winning-bid';
export declare const RMRKMarketplace: {
    useDEFAULT_ADMIN_ROLE(opts: DEFAULT_ADMIN_ROLEOptions): ReturnType<typeof useDEFAULT_ADMIN_ROLE>;
    useMAX_BPS(opts: MAX_BPSOptions): ReturnType<typeof useMAX_BPS>;
    useAcceptOffer(args: AcceptOfferArguments, opts: AcceptOfferOptions): ReturnType<typeof useAcceptOffer>;
    useBidBufferBps(opts: BidBufferBpsOptions): ReturnType<typeof useBidBufferBps>;
    useBuy(args: BuyArguments, opts: BuyOptions): ReturnType<typeof useBuy>;
    useCancelAuction(args: CancelAuctionArguments, opts: CancelAuctionOptions): ReturnType<typeof useCancelAuction>;
    useCancelDirectListing(args: CancelDirectListingArguments, opts: CancelDirectListingOptions): ReturnType<typeof useCancelDirectListing>;
    useCreateListing(args: CreateListingArguments, opts: CreateListingOptions): ReturnType<typeof useCreateListing>;
    useGetListingForNft(args: GetListingForNftArguments[], opts: GetListingForNftOptions): ReturnType<typeof useGetListingForNft>;
    useGetPlatformFeeInfo(opts: GetPlatformFeeInfoOptions): ReturnType<typeof useGetPlatformFeeInfo>;
    useGetRoleAdmin(args: GetRoleAdminArguments[], opts: GetRoleAdminOptions): ReturnType<typeof useGetRoleAdmin>;
    useGetRoleMember(args: GetRoleMemberArguments[], opts: GetRoleMemberOptions): ReturnType<typeof useGetRoleMember>;
    useGetRoleMemberCount(args: GetRoleMemberCountArguments[], opts: GetRoleMemberCountOptions): ReturnType<typeof useGetRoleMemberCount>;
    useGrantRole(args: GrantRoleArguments, opts: GrantRoleOptions): ReturnType<typeof useGrantRole>;
    useHasRole(args: HasRoleArguments[], opts: HasRoleOptions): ReturnType<typeof useHasRole>;
    useIsTrustedForwarder(args: IsTrustedForwarderArguments[], opts: IsTrustedForwarderOptions): ReturnType<typeof useIsTrustedForwarder>;
    useListings(args: ListingsArguments[], opts: ListingsOptions): ReturnType<typeof useListings>;
    useOffer(args: OfferArguments, opts: OfferOptions): ReturnType<typeof useOffer>;
    useOffers(args: OffersArguments[], opts: OffersOptions): ReturnType<typeof useOffers>;
    useOnERC1155BatchReceived(args: OnERC1155BatchReceivedArguments, opts: OnERC1155BatchReceivedOptions): UseRMRKMarketplaceOnERC1155BatchReceivedReturnValue;
    useOnERC1155Received(args: OnERC1155ReceivedArguments, opts: OnERC1155ReceivedOptions): UseRMRKMarketplaceOnERC1155ReceivedReturnValue;
    useOnERC721Received(args: OnERC721ReceivedArguments[], opts: OnERC721ReceivedOptions): ReturnType<typeof useOnERC721Received>;
    useRenounceRole(args: RenounceRoleArguments, opts: RenounceRoleOptions): ReturnType<typeof useRenounceRole>;
    useRevokeRole(args: RevokeRoleArguments, opts: RevokeRoleOptions): ReturnType<typeof useRevokeRole>;
    useSetAuctionBuffers(args: SetAuctionBuffersArguments, opts: SetAuctionBuffersOptions): ReturnType<typeof useSetAuctionBuffers>;
    useSetPlatformFeeInfo(args: SetPlatformFeeInfoArguments, opts: SetPlatformFeeInfoOptions): ReturnType<typeof useSetPlatformFeeInfo>;
    useSettleAuction(args: SettleAuctionArguments, opts: SettleAuctionOptions): ReturnType<typeof useSettleAuction>;
    useSupportsInterface(args: SupportsInterfaceArguments[], opts: SupportsInterfaceOptions): ReturnType<typeof useSupportsInterface>;
    useTimeBuffer(opts: TimeBufferOptions): ReturnType<typeof useTimeBuffer>;
    useTotalListings(opts: TotalListingsOptions): ReturnType<typeof useTotalListings>;
    useUpdateListing(args: UpdateListingArguments, opts: UpdateListingOptions): ReturnType<typeof useUpdateListing>;
    useWinningBid(args: WinningBidArguments[], opts: WinningBidOptions): ReturnType<typeof useWinningBid>;
};
